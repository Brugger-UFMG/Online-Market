@startuml online_market

package online_market {
    package orders {
        interface I_Order_Service {
            --
            + {abstract} place_order(customer: Customer, products: list[Product]) -> Order
            + {abstract} cancel_order(order_id: int) -> bool
            + {abstract} send_order(order_id: int) -> none
            + {abstract} receive_order(order_id: int) -> none
        }

        class Order_Manager {
            # «get» orders : dict[Order.id, Order]
            - «get» owner : Owner
            --
            + place_order(customer: Customer, products: list[Product]) -> Order
            + cancel_order(order_id: int) -> bool
            + send_order(order_id: int) -> none
            + receive_order(order_id: int) -> none
            + list_orders() -> list[Order]
            + ids() -> set[int]
            - generate_id() -> int
        }

        class Order {
            # «get» status : str
            # «get» products : list[Product]
            # «get» price : float
            - «get» id : int
            - «get» customer : Customer
            --
            + {static} from_dict(data: dict) -> none
            + to_dict() -> dict

            + cancel() -> bool
            + send() -> bool
            + receive() -> bool
            + description(id: int) -> str
        }
        
    }

    package products {
        interface I_Product_Manager {
            --
            + {abstract} register_product(id: int, name: str, price: float) -> none
            + {abstract} add_product(product_id: int, ammount: int) -> none
            + {abstract} remove_product(product_id: int, ammount: int) -> none
            + {abstract} get_product(product_id: int) -> Product
            + {abstract} retrieve_product(product_id: int, ammount: int) -> Product
        }

        class Product_Manager {
            # «get» products : dict[Product.id, Product]
            - «get» owner : Owner
            --
            + register_product(id: int, name: str, price: float) -> none
            + add_product(product_id: int, ammount: int) -> none
            + remove_product(product_id: int, ammount: int) -> none
            + delete_product(product_id: int) -> none
            + get_product(product_id: int) -> Product
            + retrieve_product(product_id: int, ammount: int) -> Product
            + list_products() -> list[Product]
            + ids() -> set[int]
        }

        class Product {
            # «get/set» name : str 
            # «get/set» price : float
            # «get/set» quantity : int
            - «get» id : int
            - «get» owner : Owner
            --
            + {static} from_dict(data: dict) -> none
            + to_dict() -> dict

            + description() -> str
            + get_total_price() -> float
        }
    }

    package users {
        abstract class Abstract_User {
            # «get/set» name : str
            - «get» id : int
            - «get» password : str 
            --
            + to_dict() -> dict

            + {abstract} view_orders() -> none

            + view_products(market: Product_Manager) -> none
            + get_permissions() -> list[str]
            + change_password() -> none

            # select_product(products: Product_Manager, message: str) -> int
        }

        class Owner {
            - «get/set» products : Product_Manager
            - «get/set» orders : Order_Manager
            --
            + {static} from_dict(data: dict) -> none

            + view_orders() -> none
            + add_product() -> none
            + remove_product() -> none
            + send_order() -> none

            - register_product() -> none
            - add_to_product() -> none
            - delete_product() -> none
            - remove_from_product() -> none
        }

        class Customer {
            # «get/set» address : Address
            # «get/set» orders: list[Order]
            --
            + {static} from_dict(data: dict) -> none
            + to_dict() -> dict

            + view_orders() -> none
            + view_products(market: Product_Manager) -> none
            + place_order(market_owner: Owner) -> none
            + get_order() -> Order
            + cancel_order() -> none
            + confirm_arrival() -> none

            - get_product_from_market(market: Product_Manager) -> Product | none
            - remove_product_from_list(products: list[Product]) -> none
        }

        class Address {
            + «get/set» street: str
            + «get/set» city: str
            + «get/set» state: str
            + «get/set» zip_code: str
            + «get/set» house_number: int
            + «get/set» complement: str
            --
            + {static} from_dict(data: dict) -> none
            + to_dict() -> dict
        }
    }
}

' orders
I_Order_Service <|.down. Order_Manager
Product " 1..n " <-right-- " 1 " Order : " contains     "

Order_Manager " 1 " -down-> " 0..n " Order : " contains "

' products
I_Product_Manager <|.down. Product_Manager

Product_Manager " 1 " -down-> " 0..n " Product : " contains "

' users
Abstract_User <|-- Owner
Abstract_User <|-- Customer

Owner -down--> " 1 " Order_Manager : " has "
Owner -down--> " 1 " Product_Manager : " has "
Customer -down-> Address : " has a "


@enduml